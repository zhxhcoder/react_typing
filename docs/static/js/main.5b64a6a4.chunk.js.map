{"version":3,"sources":["Components/Row/index.less","Components/Row/index.tsx","Components/Coder/index.tsx","data/js/js-array.ts","data/css/css.ts","data/js/js-date.ts","data/js/js-math.ts","data/js/js-number.ts","data/js/js-object.ts","data/js/js-string.ts","data/js/js-map-set.ts","data/js/js-promise.ts","data/js/js-global.ts","data/index.ts","data/test.ts","Page/index.tsx","serviceWorker.ts","index.tsx","App.tsx","Page/index.less"],"names":["module","exports","React","startTime","endTime","forwardRef","props","ref","coderNumber","textArray","useState","targetCode","setTargetCode","isReadOnly","setIsReadOnly","itemWord","setItem","inputRef","useRef","blur","input","current","focus","setIsRead","bl","getClassName","code","index","length","styles","success","error","useImperativeHandle","className","box","map","item","changeDesc","text","key","data-i","readOnly","type","onChange","event","value","target","next","console","log","prev","onPaste","e","preventDefault","desc","href","url","refs","nextInput","currInput","Date","getTime","all","document","querySelectorAll","errorLength","end","start","useEffect","forEach","row","createRef","rowIndex","bind","css","splitRow","data","result","len","word","i","push","pop","jsArrayData","jsArray","jsDateData","jsDate","jsMathData","jsMath","jsNumberData","jsNumber","jsObjectData","jsObject","jsStringData","jsString","jsMapSetData","jsMapSet","jsPromiseData","jsPromise","jsGlobalData","jsGlobal","jsAllData","concat","Index","select","setSelect","speed","setSpeed","correct","setCorrect","codeData","setCodeData","coderKey","updateCoderKey","isStart","setIsStart","codeRef","coder","Math","random","onClick","Boolean","window","location","hostname","match","WEB_ENV","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5b64a6a4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"box\":\"index_box__3pfbD\",\"desc\":\"index_desc__3Grbd\",\"content-row\":\"index_content-row__3OHtg\",\"success\":\"index_success__3sExW\",\"error\":\"index_error__3LeBD\"};","import React, { useState, useRef, useImperativeHandle } from 'react'\r\nimport styles from './index.less'\r\n\r\nexport interface ItemType {\r\n    text: string,\r\n    desc: string,\r\n    url?: string\r\n}\r\nexport interface RowProps {\r\n    rowIndex: number,\r\n    textArray: ItemType[],\r\n    next: () => void,\r\n    prev: () => void,\r\n}\r\n\r\nexport interface RowRefMethods {\r\n    blur: () => void\r\n    focus: () => void\r\n    setIsRead: (bl: boolean) => void\r\n}\r\n\r\nfunction Row(props: RowProps, ref: React.Ref<RowRefMethods>) {\r\n    let coderNumber = -1\r\n    const {textArray} = props\r\n    const [targetCode, setTargetCode] = useState('')\r\n    const [isReadOnly, setIsReadOnly] = useState(true)\r\n    const [itemWord, setItem] = useState<ItemType>()\r\n\r\n    const inputRef = useRef<HTMLInputElement>(null)\r\n    useImperativeHandle(ref, () => {\r\n        return {\r\n            blur: blur,\r\n            focus: focus,\r\n            setIsRead: setIsRead\r\n        }\r\n    })\r\n    function blur() {\r\n        const input = inputRef.current\r\n        if(input) {\r\n            input.blur()\r\n        }\r\n    }\r\n    function focus() {\r\n        const input = inputRef.current\r\n        if(input) {\r\n            input.focus()\r\n        }\r\n    }\r\n\r\n    function setIsRead(bl: boolean) {\r\n        setIsReadOnly(bl)\r\n    }\r\n    \r\n    function changeInputValue(event: React.ChangeEvent<HTMLInputElement>) {\r\n        const { value } = event.target\r\n        \r\n        if(value.length >= coderNumber) {\r\n            blur()\r\n            props.next()\r\n        }\r\n        if(value === '' && targetCode !== '') {\r\n            console.log('row delete')\r\n            blur()\r\n            props.prev()\r\n        }\r\n        if(value.length > coderNumber) return\r\n        setTargetCode(value)\r\n    }\r\n\r\n    function getClassName(code: string, index: number): string {\r\n        const valueIndex = targetCode.length - 1\r\n        if(index > valueIndex) {\r\n            return 'code-atom'\r\n        }\r\n        if(code === targetCode[index]) {\r\n            return `${styles.success} code-success code-atom`\r\n        }else{\r\n            return `${styles.error} code-error code-atom`\r\n        }\r\n    }\r\n\r\n    function changeDesc(item: ItemType) {\r\n        // \r\n        if(itemWord !== item) {\r\n            setItem(item)\r\n        }\r\n    }\r\n\r\n    function paste(e: React.ClipboardEvent<HTMLInputElement>) {\r\n        e.preventDefault()\r\n        return false\r\n    }\r\n\r\n    return (<div className={styles.box}>\r\n        <p className={styles['content-row']}>\r\n            {\r\n                textArray.map((item: ItemType) => {\r\n                    if(coderNumber === targetCode.length - 1 && !isReadOnly) {\r\n                        // 进入下一个单词的边界，更新单词描述\r\n                        changeDesc(item)\r\n                    }\r\n                    return [...item.text, ' '].map((code: string) => {\r\n                        coderNumber = coderNumber + 1\r\n                        return <span key={`${coderNumber}`} data-i={coderNumber} className={getClassName(code, coderNumber)}>{code}</span>\r\n                    })\r\n                })\r\n            }\r\n        </p>\r\n\r\n        <input readOnly={isReadOnly} ref={inputRef} className={styles['content-row']} type=\"text\"\r\n            onChange={changeInputValue} onPaste={paste}/>\r\n        \r\n        {itemWord && !isReadOnly && <div className={styles.desc}>\r\n            <p><a href={itemWord.url} target=\"_blank\">[查看详情]</a>{itemWord.desc}</p>\r\n        </div>}\r\n    </div>)\r\n}\r\n\r\nexport default React.forwardRef<RowRefMethods, RowProps>(Row)","import React, { useEffect, useState, useImperativeHandle } from 'react'\r\nimport Row, { RowRefMethods, ItemType } from '../Row'\r\nimport styles from './index.less'\r\n\r\nexport interface CoderType {\r\n    code: any[],\r\n    end: (speed: string, correct: string) => void\r\n}\r\nexport interface CoderMethots {\r\n    start: () => void\r\n}\r\n\r\nlet startTime: number\r\nlet endTime: number\r\n\r\n\r\nfunction Coder (props: CoderType, ref: React.Ref<CoderMethots>) {\r\n    const { code } = props\r\n\r\n    const refs: React.RefObject<RowRefMethods>[]= []\r\n\r\n\r\n    useImperativeHandle(ref, () => {\r\n        return {\r\n            start: () => {\r\n                start()\r\n            }\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        refs.forEach(ref => {\r\n            const input = ref.current\r\n            if(input) {\r\n                input.setIsRead(true)\r\n            }\r\n        })\r\n    }, [code])\r\n \r\n    /**\r\n     * @param index \r\n     * 把当前行设置为只读，下一行设置为可读，并设置焦点\r\n     */\r\n    function next(index: number) {\r\n        const nextInput = refs[index + 1]\r\n        const currInput = refs[index]\r\n        if(currInput) {\r\n            currInput.current!.setIsRead(true)\r\n        }\r\n        if(nextInput) {\r\n            nextInput.current!.setIsRead(false)\r\n            nextInput.current!.focus()\r\n        }else {\r\n            // end\r\n            end()\r\n        }\r\n    }\r\n    function prev(index: number) {\r\n        const nextInput = refs[index - 1]\r\n        if(nextInput) {\r\n            nextInput.current!.setIsRead(false)\r\n            nextInput.current!.focus()\r\n        }else {\r\n            const currInput = refs[index]\r\n            if(currInput) {\r\n                currInput.current!.setIsRead(false)\r\n                currInput.current!.focus()\r\n            }\r\n        }\r\n    }\r\n\r\n    function start() {\r\n        console.log('start')\r\n        next(-1)\r\n        startTime = new Date().getTime()\r\n    }\r\n    function end() {\r\n        endTime = new Date().getTime()\r\n        let all = document.querySelectorAll('.code-atom').length\r\n        let errorLength = document.querySelectorAll('.code-error').length\r\n        props.end(all / ((endTime - startTime) / 1000) * 60 + 'code / min', (1 - errorLength / all) * 100 + '%')\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                code.map((row: ItemType[], index) => {\r\n                    refs[index] = React.createRef()\r\n                    return <Row \r\n                        ref={refs[index]} \r\n                        textArray={row} key={index} \r\n                        rowIndex={index}\r\n                        prev={prev.bind(null, index)}\r\n                        next={next.bind(null, index)}/>\r\n                })\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default React.forwardRef(Coder)","export default [\r\n    {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from',\r\n        'text': 'Array.from()',\r\n        'desc': 'Array.from() 方法从一个类似数组或可迭代对象中创建一个新的数组实例。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray',\r\n        'text': 'Array.isArray()',\r\n        'desc': 'Array.isArray() 用于确定传递的值是否是一个 Array。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/observe',\r\n        'text': 'Array.observe()',\r\n        'desc': 'Array.observe() 方法用于异步监视数组发生的变化，类似于针对对象的 Object.observe() 。当数组的值发生变化时，它按发生顺序提供了一个变化流。与 Object.observe() 类似，它由如下可接受的变化类型列表[\\'add\\'、\\'update\\'、\\'delete\\'、\\'splice\\']触发。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/of',\r\n        'text': 'Array.of()',\r\n        'desc': 'Array.of() 方法创建一个具有可变数量参数的新数组实例，而不考虑参数的数量或类型。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/concat',\r\n        'text': 'concat()',\r\n        'desc': 'concat() 方法用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin',\r\n        'text': 'copyWithin()',\r\n        'desc': '改变了的数组。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/entries',\r\n        'text': 'entries()',\r\n        'desc': 'entries() 方法返回一个新的Array Iterator对象，该对象包含数组中每个索引的键/值对。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/every',\r\n        'text': 'every()',\r\n        'desc': 'every() 方法测试数组的所有元素是否都通过了指定函数的测试。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/fill',\r\n        'text': 'fill()',\r\n        'desc': 'fill() 方法用一个固定值填充一个数组中从起始索引到终止索引内的全部元素。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/filter',\r\n        'text': 'filter()',\r\n        'desc': 'filter() 方法创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/find',\r\n        'text': 'find()',\r\n        'desc': 'find() 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex',\r\n        'text': 'findIndex()',\r\n        'desc': 'findIndex()方法返回数组中满足提供的测试函数的第一个元素的索引。否则返回-1。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flat',\r\n        'text': 'flat()',\r\n        'desc': 'flat() 方法会递归到指定深度将所有子数组连接，并返回一个新数组。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap',\r\n        'text': 'flatMap()',\r\n        'desc': 'flatMap()方法首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。它与 map 和 深度值1的 flatten 几乎相同，但flatMap通常在合并成一种方法的效率稍微高一些。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach',\r\n        'text': 'forEach()',\r\n        'desc': 'forEach() 方法对数组的每个元素执行一次提供的函数。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes',\r\n        'text': 'includes()',\r\n        'desc': 'includes() 方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回false。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf',\r\n        'text': 'indexOf()',\r\n        'desc': 'indexOf()方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/join',\r\n        'text': 'join()',\r\n        'desc': 'join() 方法将一个数组（或一个类数组对象）的所有元素连接成一个字符串并返回这个字符串。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/keys',\r\n        'text': 'keys()',\r\n        'desc': 'keys() 方法返回一个新的Array迭代器，它包含数组中每个索引的键。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf',\r\n        'text': 'lastIndexOf()',\r\n        'desc': 'lastIndexOf() 方法返回指定元素（也即有效的 JavaScript 值或变量）在数组中的最后一个的索引，如果不存在则返回 -1。从数组的后面向前查找，从 fromIndex 处开始。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map',\r\n        'text': 'map()',\r\n        'desc': 'map() 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/pop',\r\n        'text': 'pop()',\r\n        'desc': 'pop()方法从数组中删除最后一个元素，并返回该元素的值。此方法更改数组的长度。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/push',\r\n        'text': 'push()',\r\n        'desc': 'push() 方法将一个或多个元素添加到数组的末尾，并返回新数组的长度。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce',\r\n        'text': 'reduce()',\r\n        'desc': 'reduce() 方法对累加器和数组中的每个元素（从左到右）应用一个函数，将其减少为单个值。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/ReduceRight',\r\n        'text': 'reduceRight()',\r\n        'desc': 'reduceRight() 方法接受一个函数作为累加器（accumulator）和数组的每个值（从右到左）将其减少为单个值。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse',\r\n        'text': 'reverse()',\r\n        'desc': 'reverse() 方法将数组中元素的位置颠倒。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/shift',\r\n        'text': 'shift()',\r\n        'desc': 'shift() 方法从数组中删除第一个元素，并返回该元素的值。此方法更改数组的长度。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice',\r\n        'text': 'slice()',\r\n        'desc': 'slice() 方法返回一个从开始到结束（不包括结束）选择的数组的一部分浅拷贝到一个新数组对象。且原始数组不会被修改。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/some',\r\n        'text': 'some()',\r\n        'desc': 'some() 方法测试数组中的某些元素是否通过由提供的函数实现的测试。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort',\r\n        'text': 'sort()',\r\n        'desc': 'sort() 方法用就地（ in-place ）的算法对数组的元素进行排序，并返回数组。 sort 排序不一定是稳定的。默认排序顺序是根据字符串Unicode码点。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice',\r\n        'text': 'splice()',\r\n        'desc': 'splice() 方法通过删除现有元素和/或添加新元素来更改一个数组的内容。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString',\r\n        'text': 'toLocaleString()',\r\n        'desc': 'toLocaleString() 返回一个字符串表示数组中的元素。数组中的元素将使用各自的 toLocaleString 方法转成字符串，这些字符串将使用一个特定语言环境的字符串（例如一个逗号 \\',\\'）隔开。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/toSource',\r\n        'text': 'toSource()',\r\n        'desc': '返回一个字符串,代表该数组的源代码.'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/toString',\r\n        'text': 'toString()',\r\n        'desc': 'toString() 返回一个字符串，表示指定的数组及其元素。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift',\r\n        'text': 'unshift()',\r\n        'desc': 'unshift() 方法将一个或多个元素添加到数组的开头，并返回新数组的长度。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/values',\r\n        'text': 'values()',\r\n        'desc': 'values() 方法返回一个新的 Array Iterator 对象，该对象包含数组每个索引的值'\r\n    }\r\n]","const css = [\r\n    {\r\n        text: 'position',\r\n        desc: 'css属性定位'\r\n    },\r\n    {\r\n        text: 'border',\r\n        desc: 'css属性边框'\r\n    },\r\n    {\r\n        text: 'color',\r\n        desc: 'css属性字体颜色'\r\n    },\r\n    {\r\n        text: 'display',\r\n        desc: 'css属性块状态'\r\n    },\r\n    {\r\n        text: 'position',\r\n        desc: 'css属性定位'\r\n    },\r\n    {\r\n        text: 'border',\r\n        desc: 'css属性边框'\r\n    },\r\n    {\r\n        text: 'color',\r\n        desc: 'css属性字体颜色'\r\n    },\r\n    {\r\n        text: 'display',\r\n        desc: 'css属性块状态'\r\n    },\r\n    {\r\n        text: 'position',\r\n        desc: 'css属性定位'\r\n    },\r\n    {\r\n        text: 'border',\r\n        desc: 'css属性边框'\r\n    },\r\n    {\r\n        text: 'color',\r\n        desc: 'css属性字体颜色'\r\n    },\r\n    {\r\n        text: 'display',\r\n        desc: 'css属性块状态'\r\n    }\r\n]\r\n\r\nexport default css;","export default [\r\n    {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/UTC',\r\n        'text': 'Date.UTC()',\r\n        'desc': 'Date.UTC() 方法接受的参数同日期构造函数接受最多参数时一样，返回从1970-1-1 00:00:00 UTC到指定日期的的毫秒数。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/now',\r\n        'text': 'Date.now()',\r\n        'desc': 'Date.now() 方法返回自1970年1月1日 00:00:00 UTC到当前时间的毫秒数。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/parse',\r\n        'text': 'Date.parse()',\r\n        'desc': 'Date.parse() 方法解析一个表示某个日期的字符串，并返回从1970-1-1 00:00:00 UTC 到该日期对象（该日期对象的UTC时间）的毫秒数，如果该字符串无法识别，或者一些情况下，包含了不合法的日期数值（如：2015-02-31），则返回值为NaN。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getDate',\r\n        'text': 'getDate()',\r\n        'desc': '根据本地时间，返回一个指定的日期对象为一个月中的第几天。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getDay',\r\n        'text': 'getDay()',\r\n        'desc': 'getDay() 方法根据本地时间，返回一个具体日期中一周的第几天，0 表示星期天。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getFullYear',\r\n        'text': 'getFullYear()',\r\n        'desc': 'getFullYear() 方法根据本地时间返回指定日期的年份。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getHours',\r\n        'text': 'getHours()',\r\n        'desc': 'getHours() 方法根据本地时间，返回一个指定的日期对象的小时。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getMilliseconds',\r\n        'text': 'getMilliseconds()',\r\n        'desc': 'getMilliseconds() 方法，根据本地时间，返回一个指定的日期对象的毫秒数。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getMinutes',\r\n        'text': 'getMinutes()',\r\n        'desc': 'getMinutes() 方法根据本地时间，返回一个指定的日期对象的分钟数。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getMonth',\r\n        'text': 'getMonth()',\r\n        'desc': '根据本地时间，返回一个指定的日期对象的月份，为基于0的值（0表示一年中的第一月）。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getSeconds',\r\n        'text': 'getSeconds()',\r\n        'desc': 'getSeconds() 方法根据本地时间，返回一个指定的日期对象的秒数。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime',\r\n        'text': 'getTime()',\r\n        'desc': 'getTime() 方法返回一个时间的格林威治时间数值。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getTimezoneOffset',\r\n        'text': 'getTimezoneOffset()',\r\n        'desc': 'getTimezoneOffset() 方法返回协调世界时（UTC）相对于当前时区的时间差值，单位为分钟。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getYear',\r\n        'text': 'getYear()',\r\n        'desc': 'getYear() 方法返回指定的本地日期的年份。因为 getYear 不返回千禧年[full years] (\\'year 2000 problem\\')，所以这个方法不再被使用，现在替换为 getFullYear .'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/setDate',\r\n        'text': 'setDate()',\r\n        'desc': 'setDate() 方法根据本地时间来指定一个日期对象的天数。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/setFullYear',\r\n        'text': 'setFullYear()',\r\n        'desc': 'setFullYear() 方法根据本地时间为一个日期对象设置年份。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/setHours',\r\n        'text': 'setHours()',\r\n        'desc': 'setHours() 方法根据本地时间为一个日期对象设置小时数，返回从1970-01-01 00:00:00 UTC 到更新后的 日期 对象实例所表示时间的毫秒数。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/setMilliseconds',\r\n        'text': 'setMilliseconds()',\r\n        'desc': 'setMilliseconds() 方法会根据本地时间设置一个日期对象的豪秒数。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/setMinutes',\r\n        'text': 'setMinutes()',\r\n        'desc': 'setMinutes() 方法根据本地时间为一个日期对象设置分钟数。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/setMonth',\r\n        'text': 'setMonth()',\r\n        'desc': 'setMonth() 方法根据本地时间为一个设置年份的日期对象设置月份。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/setSeconds',\r\n        'text': 'setSeconds()',\r\n        'desc': 'setSeconds() 方法根据本地时间设置一个日期对象的秒数。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/setTime',\r\n        'text': 'setTime()',\r\n        'desc': 'setTime() 方法以一个表示从1970-1-1 00:00:00 UTC计时的毫秒数为来为 Date 对象设置时间。'\r\n    },  {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/setYear',\r\n        'text': 'setYear()',\r\n        'desc': 'The setYear() method sets the year for a specified date according to local time. Because setYear does not set full years (\\'year 2000 problem\\'), it is no longer used and has been replaced by the setFullYear method.'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/toDateString',\r\n        'text': 'toDateString()',\r\n        'desc': 'toDateString() 方法以美式英语和人类易读的形式返回一个日期对象日期部分的字符串。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/toGMTString',\r\n        'text': 'toGMTString()',\r\n        'desc': 'The toGMTString() method converts a date to a string, using Internet GMT conventions. The exact format of the value returned by toGMTString varies according to the platform and browser, in general it should represent a human readable date string.'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString',\r\n        'text': 'toISOString()',\r\n        'desc': 'toISOString() 方法返回一个 ISO（ISO 8601 Extended Format）格式的字符串： YYYY-MM-DDTHH:mm:ss.sssZ。时区总是UTC（协调世界时），加一个后缀“Z”标识。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/toJSON',\r\n        'text': 'toJSON()',\r\n        'desc': 'toJSON() 方法返回 Date 对象的字符串形式。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleDateString',\r\n        'text': 'toLocaleDateString()',\r\n        'desc': 'toLocaleDateString() 方法返回该日期对象日期部分的字符串，该字符串格式因不同语言而不同。新增的参数 locales 和 options 使程序能够指定使用哪种语言格式化规则，允许定制该方法的表现（behavior）。在旧版本浏览器中， locales 和 options 参数被忽略，使用的语言环境和返回的字符串格式是各自独立实现的。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleFormat',\r\n        'text': 'toLocaleFormat()',\r\n        'desc': '非标准方法 toLocaleFormat() 按特定的格式将一个日期转换成一个字符串。 Intl.DateTimeFormat 是符合标准的格式化日期的替代方法。另见更新的(newer)版本的 toLocaleDateString()方法.'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString',\r\n        'text': 'toLocaleString()',\r\n        'desc': 'toLocaleString() 方法返回该日期对象的字符串，该字符串格式因不同语言而不同。新增的参数 locales 和 options 使程序能够指定使用哪种语言格式化规则，允许定制该方法的表现（behavior）。在旧版本浏览器中， locales 和 options 参数被忽略，使用的语言环境和返回的字符串格式是各自独立实现的。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString',\r\n        'text': 'toLocaleTimeString()',\r\n        'desc': 'The toLocaleTimeString() 方法返回该日期对象时间部分的字符串，该字符串格式因不同语言而不同。新增的参数 locales 和 options 使程序能够指定使用哪种语言格式化规则，允许定制该方法的表现（behavior）。在旧版本浏览器中， locales 和 options 参数被忽略，使用的语言环境和返回的字符串格式是各自独立实现的。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/toSource',\r\n        'text': 'toSource()',\r\n        'desc': 'toSource() 返回表示源代码的字符串。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/toString',\r\n        'text': 'toString()',\r\n        'desc': 'toString() 方法返回一个字符串，表示该Date对象。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/toTimeString',\r\n        'text': 'toTimeString()',\r\n        'desc': 'toTimeString() 方法以人类易读形式返回一个日期对象时间部分的字符串，该字符串以美式英语格式化。'\r\n    }\r\n]","export default [\r\n    {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/PI',\r\n        'text': 'Math.PI',\r\n        'desc': 'Math.PI 表示一个圆的周长与直径的比例，约为 3.14159：'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/SQRT1_2',\r\n        'text': 'Math.SQRT1_2',\r\n        'desc': 'Math.SQRT1_2 属性表示 1/2 的平方根，约为 0.707：'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/SQRT2',\r\n        'text': 'Math.SQRT2',\r\n        'desc': 'Math.SQRT2 属性表示 2 的平方根，约为 1.414：'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/abs',\r\n        'text': 'Math.abs()',\r\n        'desc': 'Math.abs(x) 函数返回指定数字 “x“ 的绝对值。如下：'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/acos',\r\n        'text': 'Math.acos()',\r\n        'desc': 'Math.acos() 返回一个数的反余弦值（单位为弧度），即：'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/%E5%8F%8D%E5%8F%8C%E6%9B%B2%E4%BD%99%E5%BC%A6%E5%80%BC',\r\n        'text': 'Math.acosh()',\r\n        'desc': 'Math.acosh()返回一个数字的反双曲余弦值，即：'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/asin',\r\n        'text': 'Math.asin()',\r\n        'desc': 'Math.asin() 方法返回一个数值的反正弦（单位为弧度），即：'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/asinh',\r\n        'text': 'Math.asinh()',\r\n        'desc': 'Math.asinh() 函数返回给定数字的反双曲正弦值, 即：'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/atan',\r\n        'text': 'Math.atan()',\r\n        'desc': 'Math.atan() 函数返回一个数值的反正切（以弧度为单位），即：'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/atan2',\r\n        'text': 'Math.atan2()',\r\n        'desc': 'Math.atan2() 返回其参数比值的反正切值。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/atanh',\r\n        'text': 'Math.atanh()',\r\n        'desc': 'Math.atanh() 函数返回一个数值反双曲正切值, 即：'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/cbrt',\r\n        'text': 'Math.cbrt()',\r\n        'desc': 'Math.cbrt() 函数返回任意数字的立方根.'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil',\r\n        'text': 'Math.ceil()',\r\n        'desc': 'Math.ceil() 函数返回大于或等于一个给定数字的最小整数。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32',\r\n        'text': 'Math.clz32()',\r\n        'desc': 'Math.clz32() 函数返回一个数字在转换成 32 无符号整形数字的二进制形式后, 开头的 0 的个数, 比如 1000000 转换成 32 位无符号整形数字的二进制形式后是 00000000000011110100001001000000, 开头的 0 的个数是 12 个, 则 Math.clz32(1000000) 返回 12.'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/cos',\r\n        'text': 'Math.cos()',\r\n        'desc': 'Math.cos() 函数返回一个数值的余弦值。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/cosh',\r\n        'text': 'Math.cosh()',\r\n        'desc': 'Math.cosh() 函数返回数值的双曲余弦函数, 可用 constant e 表示:'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/exp',\r\n        'text': 'Math.exp()',\r\n        'desc': 'Math.exp() 函数返回 ex，x 表示参数，e 是欧拉常数（Euler\\'s constant），自然对数的底数。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/expm1',\r\n        'text': 'Math.expm1()',\r\n        'desc': 'Math.expm1() 函数返回 Ex - 1, 其中 x 是该函数的参数, E 是自然对数的底数 2.718281828459045.'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/floor',\r\n        'text': 'Math.floor()',\r\n        'desc': 'Math.floor() 返回小于或等于一个给定数字的最大整数。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/fround',\r\n        'text': 'Math.fround()',\r\n        'desc': 'Math.fround() 可以将任意的数字转换为离它最近的单精度浮点数形式的数字。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/hypot',\r\n        'text': 'Math.hypot()',\r\n        'desc': 'Math.hypot() 函数返回它的所有参数的平方和的平方根，即：'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/imul',\r\n        'text': 'Math.imul()',\r\n        'desc': '该函数返回两个参数的类C的32位整数乘法运算的运算结果.'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/log',\r\n        'text': 'Math.log()',\r\n        'desc': 'Math.log() 函数返回一个数的自然对数，即：'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/log10',\r\n        'text': 'Math.log10()',\r\n        'desc': 'Math.log10() 函数返回一个数字以 10 为底的对数.'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/log1p',\r\n        'text': 'Math.log1p()',\r\n        'desc': 'Math.log1p() 函数返回一个数字加1后的自然对数 (底为 E), 既log(x+1).'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/log2',\r\n        'text': 'Math.log2()',\r\n        'desc': 'Math.log2() 函数返回一个数字以 2 为底的对数.'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/max',\r\n        'text': 'Math.max()',\r\n        'desc': 'Math.max() 函数返回一组数中的最大值。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/min',\r\n        'text': 'Math.min()',\r\n        'desc': 'Math.min() 返回零个或更多个数值的最小值。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/pow',\r\n        'text': 'Math.pow()',\r\n        'desc': 'Math.pow() 函数返回基数（base）的指数（exponent）次幂，即 baseexponent。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/random',\r\n        'text': 'Math.random()',\r\n        'desc': 'Math.random() 函数返回一个浮点,  伪随机数在范围[0，1)，也就是说，从0（包括0）往上，但是不包括1（排除1），然后您可以缩放到所需的范围。实现将初始种子选择到随机数生成算法;它不能被用户选择或重置。他不能被用户选择或重置。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/round',\r\n        'text': 'Math.round()',\r\n        'desc': 'Math.round() 函数返回一个数字四舍五入后最接近的整数。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/sign',\r\n        'text': 'Math.sign()',\r\n        'desc': 'Math.sign() 函数返回一个数字的符号, 指示数字是正数，负数还是零。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/sin',\r\n        'text': 'Math.sin()',\r\n        'desc': 'Math.sin() 函数返回一个数值的正弦值。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/sinh',\r\n        'text': 'Math.sinh()',\r\n        'desc': 'Math.sinh() 函数返回一个数字(单位为角度)的双曲正弦值.'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/sqrt',\r\n        'text': 'Math.sqrt()',\r\n        'desc': 'Math.sqrt() 函数返回一个数的平方根，即：'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/tan',\r\n        'text': 'Math.tan()',\r\n        'desc': 'Math.tan() 方法返回一个数值的正切值。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/tanh',\r\n        'text': 'Math.tanh()',\r\n        'desc': 'Math.tanh() 函数将会返回一个数的双曲正切函数值，计算如下:'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc',\r\n        'text': 'Math.trunc()',\r\n        'desc': 'Math.trunc() 方法会将数字的小数部分去掉，只保留整数部分。'\r\n    }\r\n]","export default [\r\n    {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON',\r\n        'text': 'Number.EPSILON',\r\n        'desc': 'Number.EPSILON 属性表示 1 和大于 1 的最小的浮点数（可表示为 Number）的差值。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER',\r\n        'text': 'Number.MAX_SAFE_INTEGER',\r\n        'desc': 'Number.MAX_SAFE_INTEGER 常量表示在 JavaScript 中最大的安全整数（maxinum safe integer)（253 - 1）。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_VALUE',\r\n        'text': 'Number.MAX_VALUE',\r\n        'desc': 'Number.MAX_VALUE 属性表示在 JavaScript 里所能表示的最大数值。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_SAFE_INTEGER',\r\n        'text': 'Number.MIN_SAFE_INTEGER',\r\n        'desc': 'Number.MIN_SAFE_INTEGER 代表在 JavaScript中最小的安全的integer型数字 (-(253 - 1)).'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/MIN_VALUE',\r\n        'text': 'Number.MIN_VALUE',\r\n        'desc': 'Number.MIN_VALUE 属性表示在 JavaScript 中所能表示的最小的正值。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/NEGATIVE_INFINITY',\r\n        'text': 'Number.NEGATIVE_INFINITY',\r\n        'desc': 'Number.NEGATIVE_INFINITY 属性表示负无穷大。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN',\r\n        'text': 'Number.NaN',\r\n        'desc': 'Number.NaN 表示“非数字”（Not-A-Number）。和 NaN 相同。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/POSITIVE_INFINITY',\r\n        'text': 'Number.POSITIVE_INFINITY',\r\n        'desc': 'Number.POSITIVE_INFINITY 属性表示正无穷大。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite',\r\n        'text': 'Number.isFinite()',\r\n        'desc': 'Number.isFinite() 方法用来检测传入的参数是否是一个有穷数（finite number）。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger',\r\n        'text': 'Number.isInteger()',\r\n        'desc': 'Number.isInteger() 方法用来判断给定的参数是否为整数。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN',\r\n        'text': 'Number.isNaN()',\r\n        'desc': 'Number.isNaN() 方法确定传递的值是否为 NaN和其类型是 Number。它是原始的全局isNaN()的更强大的版本。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger',\r\n        'text': 'Number.isSafeInteger()',\r\n        'desc': 'Number.isSafeInteger() 方法用来判断传入的参数值是否是一个“安全整数”（safe integer）。一个安全整数是一个符合下面条件的整数：'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat',\r\n        'text': 'Number.parseFloat()',\r\n        'desc': 'Number.parseFloat() 方法可以把一个字符串解析成浮点数。该方法与全局的 parseFloat() 函数相同，并且处于 ECMAScript 6 规范中（用于全局变量的模块化）。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/parseInt',\r\n        'text': 'Number.parseInt()',\r\n        'desc': 'Number.parseInt() 方法可以根据给定的进制数把一个字符串解析成整数。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toExponential',\r\n        'text': 'toExponential()',\r\n        'desc': 'toExponential() 方法以指数表示法返回该数值字符串表示形式。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed',\r\n        'text': 'toFixed()',\r\n        'desc': 'toFixed() 方法使用定点表示法来格式化一个数。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString',\r\n        'text': 'toLocaleString()',\r\n        'desc': 'toLocaleString() 方法返回这个数字在特定语言环境下的表示字符串。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision',\r\n        'text': 'toPrecision()',\r\n        'desc': 'toPrecision() 方法以指定的精度返回该数值对象的字符串表示。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toSource',\r\n        'text': 'toSource()',\r\n        'desc': 'toSource() 方法返回该对象源码的字符串表示。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toString',\r\n        'text': 'toString()',\r\n        'desc': 'toString() 方法返回指定 Number 对象的字符串表示形式。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/valueOf',\r\n        'text': 'valueOf()',\r\n        'desc': 'valueOf() 方法返回一个被 Number 对象包装的原始值。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toInteger',\r\n        'text': 'Number.toInteger()',\r\n        'desc': 'Number.toInteger() 用来将参数转换成整数,但该方法的实现已被移除.'\r\n    }\r\n]","export default [\r\n    {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign',\r\n        'text': 'Object.assign()',\r\n        'desc': 'Object.assign() 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create',\r\n        'text': 'Object.create()',\r\n        'desc': 'Object.create()方法创建一个新对象，使用现有的对象来提供新创建的对象的__proto__。 （请查看浏览器控制台以获取视觉证据。）'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties',\r\n        'text': 'Object.defineProperties()',\r\n        'desc': 'Object.defineProperties() 方法直接在一个对象上定义新的属性或修改现有属性，并返回该对象。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty',\r\n        'text': 'Object.defineProperty()',\r\n        'desc': 'Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性， 并返回这个对象。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/entries',\r\n        'text': 'Object.entries()',\r\n        'desc': 'The source for this interactive example is stored in a GitHub repository. If you\\'d like to contribute to the interactive examples project, please clone https://github.com/mdn/interactive-examples and send us a pull request.'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze',\r\n        'text': 'Object.freeze()',\r\n        'desc': 'Object.freeze() 方法可以冻结一个对象，冻结指的是不能向这个对象添加新的属性，不能修改其已有属性的值，不能删除已有属性，以及不能修改该对象已有属性的可枚举性、可配置性、可写性。也就是说，这个对象永远是不可变的。该方法返回被冻结的对象。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getNotifier',\r\n        'text': 'Object.getNotifier()',\r\n        'desc': 'Object.getNotifer() 方法用于创建可人工触发 change 事件的对象，但该方法在浏览器中已被废弃。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor',\r\n        'text': 'Object.getOwnPropertyDescriptor()',\r\n        'desc': 'Object.getOwnPropertyDescriptor() 方法返回指定对象上一个自有属性对应的属性描述符。（自有属性指的是直接赋予该对象的属性，不需要从原型链上进行查找的属性）'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptors',\r\n        'text': 'Object.getOwnPropertyDescriptors()',\r\n        'desc': 'Object.getOwnPropertyDescriptors() 方法用来获取一个对象的所有自身属性的描述符。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames',\r\n        'text': 'Object.getOwnPropertyNames()',\r\n        'desc': 'Object.getOwnPropertyNames()方法返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括Symbol值作为名称的属性）组成的数组。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols',\r\n        'text': 'Object.getOwnPropertySymbols()',\r\n        'desc': 'Object.getOwnPropertySymbols() 方法返回一个给定对象自身的所有 Symbol 属性的数组。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/GetPrototypeOf',\r\n        'text': 'Object.getPrototypeOf()',\r\n        'desc': 'Object.getPrototypeOf() 方法返回指定对象的原型（内部[[Prototype]]属性的值）。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/is',\r\n        'text': 'Object.is()',\r\n        'desc': 'Object.is()方法判断两个值是否是相同的值。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible',\r\n        'text': 'Object.isExtensible()',\r\n        'desc': 'Object.isExtensible() 方法判断一个对象是否是可扩展的（是否可以在它上面添加新的属性）。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isFrozen',\r\n        'text': 'Object.isFrozen()',\r\n        'desc': 'Object.isFrozen()方法判断一个对象是否被冻结。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isSealed',\r\n        'text': 'Object.isSealed()',\r\n        'desc': 'Object.isSealed() 方法判断一个对象是否被密封。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/keys',\r\n        'text': 'Object.keys()',\r\n        'desc': 'Object.keys() 方法会返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和使用 for...in 循环遍历该对象时返回的顺序一致 。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/observe',\r\n        'text': 'Object.observe()',\r\n        'desc': 'Object.observe() 方法用于异步地监视一个对象的修改。当对象属性被修改时，方法的回调函数会提供一个有序的修改流。然而，这个接口已经被废弃并从各浏览器中移除。你可以使用更通用的 Proxy 对象替代。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/preventExtensions',\r\n        'text': 'Object.preventExtensions()',\r\n        'desc': 'Object.preventExtensions()方法让一个对象变的不可扩展，也就是永远不能再添加新的属性。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/eval',\r\n        'text': 'eval()',\r\n        'desc': 'Object.eval() 方法用于在对象的上下文中对 JavaScript 代码字符串求值，但该方法已被移除。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty',\r\n        'text': 'hasOwnProperty()',\r\n        'desc': 'hasOwnProperty() 方法会返回一个布尔值，指示对象自身属性中是否具有指定的属性'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/isPrototypeOf',\r\n        'text': 'isPrototypeOf()',\r\n        'desc': 'isPrototypeOf() 方法用于测试一个对象是否存在于另一个对象的原型链上。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/propertyIsEnumerable',\r\n        'text': 'propertyIsEnumerable()',\r\n        'desc': 'propertyIsEnumerable() 方法返回一个布尔值，表示指定的属性是否可枚举。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toLocaleString',\r\n        'text': 'toLocaleString()',\r\n        'desc': 'toLocaleString() 方法返回一个该对象的字符串表示。此方法被用于派生对象为了特定语言环境的目的（locale-specific purposes）而重载使用。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toSource',\r\n        'text': 'toSource()',\r\n        'desc': 'toSource()方法返回一个表示对象源代码的字符串。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString',\r\n        'text': 'toString()',\r\n        'desc': 'toString() 方法返回一个表示该对象的字符串。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/unwatch',\r\n        'text': 'unwatch()',\r\n        'desc': 'unwatch() 删除一个 watch() 设置的 watchpoint.'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/valueOf',\r\n        'text': 'valueOf()',\r\n        'desc': 'valueOf() 方法返回指定对象的原始值。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/watch',\r\n        'text': 'watch()',\r\n        'desc': ''\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/seal',\r\n        'text': 'Object.seal()',\r\n        'desc': 'The source for this interactive example is stored in a GitHub repository. If you\\'d like to contribute to the interactive examples project, please clone https://github.com/mdn/interactive-examples and send us a pull request.'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf',\r\n        'text': 'Object.setPrototypeOf()',\r\n        'desc': '如果对象的[[Prototype]]被修改成不可扩展(通过 Object.isExtensible()查看)，就会抛出 TypeError异常。如果prototype参数不是一个对象或者null(例如，数字，字符串，boolean，或者 undefined)，则什么都不做。否则，该方法将obj的[[Prototype]]修改为新的值。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/unobserve',\r\n        'text': 'Object.unobserve()',\r\n        'desc': 'Object.unobserve() 是用来移除通过 Object.observe()设置的观察者的方法。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/values',\r\n        'text': 'Object.values()',\r\n        'desc': 'Object.values()方法返回一个给定对象自己的所有可枚举属性值的数组，值的顺序与使用for...in循环的顺序相同 ( 区别在于 for-in 循环枚举原型链中的属性 )。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply',\r\n        'text': 'apply()',\r\n        'desc': 'apply() 方法调用一个函数, 其具有一个指定的this值，以及作为一个数组（或类似数组的对象）提供的参数。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/bind',\r\n        'text': 'bind()',\r\n        'desc': 'bind()方法创建一个新的函数, 当被调用时，将其this关键字设置为提供的值，在调用新函数时，在任何提供之前提供一个给定的参数序列。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call',\r\n        'text': 'call()',\r\n        'desc': 'call() 方法调用一个函数, 其具有一个指定的this值和分别地提供的参数(参数的列表)。'\r\n    }, {\r\n        'url': 'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/isGenerator',\r\n        'text': 'isGenerator()',\r\n        'desc': '判断一个函数是否是一个生成器.'\r\n    }\r\n]","/* eslint-disable */\r\n\r\nexport default [\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode\",\r\n      \"desc\": \"静态 String.fromCharCode() 方法返回由指定的UTF-16代码单元序列创建的字符串。\",\r\n      \"text\": \"String.fromCharCode()\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint\",\r\n      \"desc\": \"String.fromCodePoint() 静态方法返回使用指定的代码点序列创建的字符串。\",\r\n      \"text\": \"String.fromCodePoint()\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/charAt\",\r\n      \"desc\": \"charAt() 方法从一个字符串中返回指定的字符。\",\r\n      \"text\": \"charAt()\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt\",\r\n      \"desc\": \"charCodeAt() 方法返回0到65535之间的整数，表示给定索引处的UTF-16代码单元 (在 Unicode 编码单元表示一个单一的 UTF-16 编码单元的情况下，UTF-16 编码单元匹配 Unicode 编码单元。但在——例如 Unicode 编码单元 > 0x10000 的这种——不能被一个 UTF-16 编码单元单独表示的情况下，只能匹配 Unicode 代理对的第一个编码单元) 。如果你想要整个代码点的值，使用 codePointAt()。\",\r\n      \"text\": \"charCodeAt()\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt\",\r\n      \"desc\": \"codePointAt() 方法返回 一个 Unicode 编码点值的非负整数。\",\r\n      \"text\": \"codePointAt()\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/concat\",\r\n      \"desc\": \"concat() 方法将一个或多个字符串与原字符串连接合并，形成一个新的字符串并返回。\",\r\n      \"text\": \"concat()\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\",\r\n      \"desc\": \"endsWith()方法用来判断当前字符串是否是以另外一个给定的子字符串“结尾”的，根据判断结果返回 true 或 false。\",\r\n      \"text\": \"endsWith()\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/includes\",\r\n      \"desc\": \"includes() 方法用于判断一个字符串是否包含在另一个字符串中，根据情况返回 true 或 false。\",\r\n      \"text\": \"includes()\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf\",\r\n      \"desc\": \"indexOf() 方法返回调用它的 String 对象中第一次出现的指定值的索引，从 fromIndex 处进行搜索。如果未找到该值，则返回 -1。\",\r\n      \"text\": \"indexOf()\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf\",\r\n      \"desc\": \"lastIndexOf() 方法返回指定值在调用该方法的字符串中最后出现的位置，如果没找到则返回 -1。length为需要检索字符串的长度，默认值为str.length。\",\r\n      \"text\": \"lastIndexOf()\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare\",\r\n      \"desc\": \"localeCompare() 方法返回一个数字来指示一个参考字符串是否在排序顺序前面或之后或与给定字符串相同。\",\r\n      \"text\": \"localeCompare()\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/match\",\r\n      \"desc\": \"match() 方法检索返回一个字符串匹配正则表达式的的结果。\",\r\n      \"text\": \"match()\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll\",\r\n      \"desc\": \"matchAll() 方法返回一个包含所有匹配正则表达式及分组捕获结果的迭代器。\",\r\n      \"text\": \"matchAll()\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/normalize\",\r\n      \"desc\": \"normalize() 方法会按照指定的一种 Unicode 正规形式将当前字符串正规化.\",\r\n      \"text\": \"normalize()\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd\",\r\n      \"desc\": \"padEnd()  方法会用一个字符串填充当前字符串（如果需要的话则重复填充），返回填充后达到指定长度的字符串。从当前字符串的末尾（右侧）开始填充。\",\r\n      \"text\": \"padEnd()\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/padStart\",\r\n      \"desc\": \"padStart() 方法用另一个字符串填充当前字符串(重复，如果需要的话)，以便产生的字符串达到给定的长度。填充从当前字符串的开始(左侧)应用的。\",\r\n      \"text\": \"padStart()\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/repeat\",\r\n      \"desc\": \"repeat() 构造并返回一个新字符串，该字符串包含被连接在一起的指定数量的字符串的副本。\",\r\n      \"text\": \"repeat()\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace\",\r\n      \"desc\": \"replace() 方法返回一个由替换值（replacement）替换一些或所有匹配的模式（pattern）后的新字符串。模式可以是一个字符串或者一个正则表达式，替换值可以是一个字符串或者一个每次匹配都要调用的回调函数。\",\r\n      \"text\": \"replace()\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/search\",\r\n      \"desc\": \"search() 方法执行正则表达式和 String 对象之间的一个搜索匹配。\",\r\n      \"text\": \"search()\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/slice\",\r\n      \"desc\": \"slice() 方法提取某个字符串的一部分，并返回一个新的字符串，且不会改动原字符串。\",\r\n      \"text\": \"slice()\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split\",\r\n      \"desc\": \"split() 方法使用指定的分隔符字符串将一个String对象分割成字符串数组，以将字符串分隔为子字符串，以确定每个拆分的位置。\",\r\n      \"text\": \"split()\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\",\r\n      \"desc\": \"startsWith() 方法用来判断当前字符串是否以另外一个给定的子字符串开头，并根据判断结果返回 true 或 false。\",\r\n      \"text\": \"startsWith()\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/substring\",\r\n      \"desc\": \"substring() 方法返回一个字符串在开始索引到结束索引之间的一个子集, 或从开始索引直到字符串的末尾的一个子集。\",\r\n      \"text\": \"substring()\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleLowerCase\",\r\n      \"desc\": \"toLocaleLowerCase()方法根据任何特定于语言环境的案例映射，返回调用字符串值转换为小写的值。\",\r\n      \"text\": \"toLocaleLowerCase()\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleUpperCase\",\r\n      \"desc\": \"toLocaleUpperCase() 使用本地化（locale-specific）的大小写映射规则将输入的字符串转化成大写形式并返回结果字符串。\",\r\n      \"text\": \"toLocaleUpperCase()\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase\",\r\n      \"desc\": \"toLowerCase() 会将调用该方法的字符串值转为小写形式，并返回。\",\r\n      \"text\": \"toLowerCase()\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/toString\",\r\n      \"desc\": \"toString() 方法返回指定对象的字符串形式。\",\r\n      \"text\": \"toString()\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase\",\r\n      \"desc\": \"toUpperCase() 将调用该方法的字符串值转换为大写形式，并返回。\",\r\n      \"text\": \"toUpperCase()\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/Trim\",\r\n      \"desc\": \"trim() 方法会从一个字符串的两端删除空白字符。在这个上下文中的空白字符是所有的空白字符 (space, tab, no-break space 等) 以及所有行终止符字符（如 LF，CR）。\",\r\n      \"text\": \"trim()\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/TrimRight\",\r\n      \"desc\": \"trimRight() 方法从一个字符串的右端移除空白字符。\",\r\n      \"text\": \"trimRight()\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/TrimLeft\",\r\n      \"desc\": \"一个新字符串，表示从其开头（左端）剥离空格的调用字符串。\",\r\n      \"text\": \"trimLeft()\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/raw\",\r\n      \"desc\": \"String.raw() 是一个模板字符串的标签函数，它的作用类似于 Python 中的字符串前缀 r 和 C# 中的字符串前缀 @（还是有点区别的，详见隔壁 Chromium 那边的这个 issue），是用来获取一个模板字符串的原始字符串的，比如说，占位符（例如 ${foo}）会被处理为它所代表的其他字符串，而转义字符（例如 \\\\n）不会。\",\r\n      \"text\": \"String.raw()\"\r\n    }\r\n  ]\r\n\r\n  /* eslint-disable */","/* eslint-disable */\r\n\r\nexport default [\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/clear\",\r\n      \"text\": \"clear()\",\r\n      \"desc\": \"clear()方法会移除Map对象中的所有元素。\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/delete\",\r\n      \"text\": \"delete()\",\r\n      \"desc\": \" delete() 方法用于移除 Map 对象中指定的元素。\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/entries\",\r\n      \"text\": \"entries()\",\r\n      \"desc\": \"entries() 方法返回一个新的包含 [key, value] 对的 Iterator 对象，返回的迭代器的迭代顺序与 Map 对象的插入顺序相同。\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach\",\r\n      \"text\": \"forEach()\",\r\n      \"desc\": \"forEach() 方法将会以插入顺序对 Map 对象中的每一个键值对执行一次参数中提供的回调函数。\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/get\",\r\n      \"text\": \"get()\",\r\n      \"desc\": \"get() 方法返回某个 Map 对象中的一个指定元素。\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/has\",\r\n      \"text\": \"has()\",\r\n      \"desc\": \"方法has() 返回一个bool值，用来表明map 中是否存在指定元素.\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/keys\",\r\n      \"text\": \"keys()\",\r\n      \"desc\": \"keys() 返回一个新的 Iterator 对象。它包含按照顺序插入 Map 对象中每个元素的key值。\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/set\",\r\n      \"text\": \"set()\",\r\n      \"desc\": \"set() 方法为 Map 对象添加或更新一个指定了键（key）和值（value）的（新）键值对。\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map/values\",\r\n      \"text\": \"values()\",\r\n      \"desc\": \"一个新的 Map 可迭代对象.\"\r\n    },\r\n    {\r\n        \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/add\",\r\n        \"text\": \"add()\",\r\n        \"desc\": \"add() 方法用来向一个 Set 对象的末尾添加一个指定的值。\"\r\n    },\r\n    {\r\n        \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/clear\",\r\n        \"text\": \"clear()\",\r\n        \"desc\": \"clear() 方法用来清空一个 Set 对象中的所有元素。\"\r\n    },\r\n    {\r\n        \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/delete\",\r\n        \"text\": \"delete()\",\r\n        \"desc\": \"delete() 方法可以从一个 Set 对象中删除指定的元素。\"\r\n    },\r\n    {\r\n        \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/entries\",\r\n        \"text\": \"entries()\",\r\n        \"desc\": \"entries() 方法返回一个新的迭代器对象 ，这个对象的元素是类似 [value, value] 形式的数组，value 是集合对象中的每个元素，迭代器对象元素的顺序即集合对象中元素插入的顺序。由于集合对象不像 Map 对象那样拥有 key，然而，为了与 Map 对象的 API 形式保持一致，故使得每一个 entry 的 key 和 value 都拥有相同的值，因而最终返回一个 [value, value] 形式的数组。\"\r\n    },\r\n    {\r\n        \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/forEach\",\r\n        \"text\": \"forEach()\",\r\n        \"desc\": \"forEach 方法会根据集合中元素的插入顺序，依次执行提供的回调函数。\"\r\n    },\r\n    {\r\n        \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/has\",\r\n        \"text\": \"has()\",\r\n        \"desc\": \"has() 方法返回一个布尔值来指示对应的值value是否存在Set对象中。\"\r\n    },\r\n    {\r\n        \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set/values\",\r\n        \"text\": \"values()\",\r\n        \"desc\": \"values() 方法返回一个 Iterator  对象，该对象按照原Set 对象元素的插入顺序返回其所有元素。\"\r\n    }\r\n  ]\r\n\r\n/* eslint-disable */","/* eslint-disable */\r\nexport default [\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\",\r\n      \"text\": \"Promise.all()\",\r\n      \"desc\": \"Promise.all(iterable) 方法返回一个 Promise 实例，此实例在 iterable 参数内所有的 promise 都“完成（resolved）”或参数中不包含 promise 时回调完成（resolve）；如果参数中  promise 有一个失败（rejected），此实例回调失败（reject），失败原因的是第一个失败 promise 的结果。\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled\",\r\n      \"text\": \"Promise.allSettled()\",\r\n      \"desc\": \"该Promise.allSettled()方法返回一个在所有给定的promise已被决议或被拒绝后决议的promise，并带有一个对象数组，每个对象表示对应的promise结果。\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/any\",\r\n      \"text\": \"Promise.any()\",\r\n      \"desc\": \"Promise.any() 接收一个Promise可迭代对象，只要其中的一个 promise 完成，就返回那个已经有完成值的 promise 。如果可迭代对象中没有一个 promise 完成（即所有的 promises 都失败/拒绝），就返回一个拒绝的 promise，返回值还有待商榷：无非是拒绝原因数组或AggregateError类型的实例，它是 Error 的一个子类，用于把单一的错误集合在一起。本质上，这个方法和Promise.all()是相反的。\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch\",\r\n      \"text\": \"Promise.prototype.catch()\",\r\n      \"desc\": \"catch() 方法返回一个Promise，并且处理拒绝的情况。它的行为与调用Promise.prototype.then(undefined, onRejected) 相同。 (事实上, calling obj.catch(onRejected) 内部calls obj.then(undefined, onRejected)).\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/finally\",\r\n      \"text\": \"Promise.prototype.finally()\",\r\n      \"desc\": \"返回一个设置了 finally 回调函数的Promise对象。\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/then\",\r\n      \"text\": \"Promise.prototype.then()\",\r\n      \"desc\": \"then() 方法返回一个 Promise。它最多需要有两个参数：Promise 的成功和失败情况的回调函数。\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/race\",\r\n      \"text\": \"Promise.race()\",\r\n      \"desc\": \"Promise.race(iterable) 方法返回一个 promise，一旦迭代器中的某个promise解决或拒绝，返回的 promise就会解决或拒绝。\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/reject\",\r\n      \"text\": \"Promise.reject()\",\r\n      \"desc\": \"Promise.reject()方法返回一个带有拒绝原因的Promise对象。\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve\",\r\n      \"text\": \"Promise.resolve()\",\r\n      \"desc\": \"The source for this interactive demo is stored in a GitHub repository. If you'd like to contribute to the interactive demo project, please clone https://github.com/mdn/interactive-examples and send us a pull request.\"\r\n    }\r\n]\r\n/* eslint-disable */","/* eslint-disable */\r\nexport default [\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/eval\",\r\n      \"text\": \"eval()\",\r\n      \"desc\": \"eval() 函数会将传入的字符串当做 JavaScript 代码进行执行。\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/isFinite\",\r\n      \"text\": \"isFinite()\",\r\n      \"desc\": \"该全局 isFinite() 函数用来判断被传入的参数值是否为一个有限数值（finite number）。在必要情况下，参数会首先转为一个数值。\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/isNaN\",\r\n      \"text\": \"isNaN()\",\r\n      \"desc\": \"isNaN() 函数用来确定一个值是否为NaN 。注：isNaN函数内包含一些非常有趣的规则；你也可以使用 ECMAScript 2015 中定义的 Number.isNaN() 来判断。\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseFloat\",\r\n      \"text\": \"parseFloat()\",\r\n      \"desc\": \"parseFloat() 函数解析一个参数（必要时先转换为字符串）并返回一个浮点数。\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/parseInt\",\r\n      \"text\": \"parseInt()\",\r\n      \"desc\": \"parseInt(string, radix)   将一个字符串 string 转换为 radix 进制的整数， radix 为介于2-36之间的数。\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/decodeURI\",\r\n      \"text\": \"decodeURI()\",\r\n      \"desc\": \"decodeURI() 函数解码一个由encodeURI 先前创建的统一资源标识符（URI）或类似的例程。\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\",\r\n      \"text\": \"decodeURIComponent()\",\r\n      \"desc\": \"decodeURIComponent() 方法用于解码由 encodeURIComponent 方法或者其它类似方法编码的部分统一资源标识符（URI）。\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURI\",\r\n      \"text\": \"encodeURI()\",\r\n      \"desc\": \"encodeURI()  函数通过将特定字符的每个实例替换为一个、两个、三或四转义序列来对统一资源标识符 (URI) 进行编码 (该字符的 UTF-8 编码仅为四转义序列)由两个 \\\"代理\\\" 字符组成)。\"\r\n    },\r\n    {\r\n      \"url\": \"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent\",\r\n      \"text\": \"encodeURIComponent()\",\r\n      \"desc\": \"encodeURIComponent()是对统一资源标识符（URI）的组成部分进行编码的方法。它使用一到四个转义序列来表示字符串中的每个字符的UTF-8编码（只有由两个Unicode代理区字符组成的字符才用四个转义字符编码）。\"\r\n    }\r\n]\r\n/* eslint-disable */","import test from './test'\r\nimport jsArray from './js/js-array'\r\nimport css from './css/css'\r\nimport jsDate from './js/js-date'\r\nimport jsMath from './js/js-math'\r\nimport jsNumber from './js/js-number'\r\nimport jsObject from './js/js-object'\r\nimport jsString from './js/js-string'\r\nimport jsMapSet from './js/js-map-set'\r\nimport jsPromise from './js/js-promise'\r\nimport jsGlobal from './js/js-global'\r\n\r\n\r\nfunction splitRow(data: any[]): any[] {\r\n    let result: any[] = [], row: any[] = [], len = 0;\r\n    data.forEach((word, i) => {\r\n        row.push(word);\r\n        len += (word.text.length + 1);// 单词长度和一个空格\r\n        if (len >= 90) { // 超出一行\r\n            const item = row.pop();  // 取出最后一个\r\n            result.push(row); // 把row放在result里面\r\n            row = [item]; // 取出的放到第二行并初始化row\r\n            len = item.text.length + 1;\r\n        }\r\n    })\r\n    return result\r\n}\r\nfunction getLength(data: any[]): number {\r\n    return data.reduce((prev, curr) => {\r\n        return prev + curr.text.length + 1\r\n    }, 0)\r\n    \r\n}\r\n\r\nexport const testData = splitRow(test)\r\n\r\nexport const jsArrayData = splitRow(jsArray)\r\n\r\nexport const cssData = splitRow(css)\r\n\r\nexport const jsDateData = splitRow(jsDate)\r\n\r\nexport const jsMathData = splitRow(jsMath)\r\n\r\nexport const jsNumberData = splitRow(jsNumber)\r\n\r\nexport const jsObjectData = splitRow(jsObject)\r\n\r\nexport const jsStringData = splitRow(jsString)\r\n\r\nexport const jsMapSetData = splitRow(jsMapSet)\r\n\r\nexport const jsPromiseData = splitRow(jsPromise)\r\n\r\nexport const jsGlobalData = splitRow(jsGlobal)\r\n\r\nexport const jsAllData = splitRow(jsArray.concat(jsDate, jsMath, jsNumber, jsObject, jsString, jsMapSet, jsPromise, jsGlobal))","let test = [\r\n    { 'text': 'My', 'desc': 'My' },\r\n    { 'text': 'father', 'desc': 'father' },\r\n    { 'text': 'was', 'desc': 'was' }, { 'text': 'a', 'desc': 'a' },\r\n    { 'text': 'self-taught', 'desc': 'self-taught' }, { 'text': 'mandolin', 'desc': 'mandolin' },\r\n    { 'text': 'player.', 'desc': 'player.' }, { 'text': 'He', 'desc': 'He' }, { 'text': 'was', 'desc': 'was' },\r\n    { 'text': 'one', 'desc': 'one' }, { 'text': 'of', 'desc': 'of' }, { 'text': 'the', 'desc': 'the' }, { 'text': 'best', 'desc': 'best' },\r\n    { 'text': 'string', 'desc': 'string' }, { 'text': 'instrument', 'desc': 'instrument' }, { 'text': 'players', 'desc': 'players' },\r\n    { 'text': 'in', 'desc': 'in' }, { 'text': 'our', 'desc': 'our' }, { 'text': 'town.', 'desc': 'town.' },\r\n    { 'text': 'He', 'desc': 'He' }, { 'text': 'could', 'desc': 'could' }, { 'text': 'not', 'desc': 'not' },\r\n    { 'text': 'read', 'desc': 'read' }, { 'text': 'music,', 'desc': 'music,' }, { 'text': 'but', 'desc': 'but' },\r\n    { 'text': 'if', 'desc': 'if' }, { 'text': 'he', 'desc': 'he' }, { 'text': 'heard', 'desc': 'heard' },\r\n    { 'text': 'a', 'desc': 'a' }, { 'text': 'tune', 'desc': 'tune' }, { 'text': 'a', 'desc': 'a' },\r\n    { 'text': 'few', 'desc': 'few' }, { 'text': 'times,', 'desc': 'times,' }, { 'text': 'he', 'desc': 'he' },\r\n    { 'text': 'could', 'desc': 'could' }, { 'text': 'play', 'desc': 'play' }, { 'text': 'it.', 'desc': 'it.' },\r\n    { 'text': 'When', 'desc': 'When' }, { 'text': 'he', 'desc': 'he' }, { 'text': 'was', 'desc': 'was' },\r\n    { 'text': 'younger,', 'desc': 'younger,' }, { 'text': 'he', 'desc': 'he' }, { 'text': 'was', 'desc': 'was' },\r\n    { 'text': 'a', 'desc': 'a' }, { 'text': 'member', 'desc': 'member' }, { 'text': 'of', 'desc': 'of' },\r\n    { 'text': 'a', 'desc': 'a' }, { 'text': 'small', 'desc': 'small' }, { 'text': 'country', 'desc': 'country' },\r\n    { 'text': 'music', 'desc': 'music' }, { 'text': 'band.', 'desc': 'band.' }, { 'text': 'They', 'desc': 'They' },\r\n    { 'text': 'would', 'desc': 'would' }, { 'text': 'play', 'desc': 'play' }, { 'text': 'at', 'desc': 'at' },\r\n    { 'text': 'local', 'desc': 'local' }, { 'text': 'dances', 'desc': 'dances' }, { 'text': 'and', 'desc': 'and' },\r\n    { 'text': 'on', 'desc': 'on' }, { 'text': 'a', 'desc': 'a' }, { 'text': 'few', 'desc': 'few' },\r\n    { 'text': 'occasions', 'desc': 'occasions' }, { 'text': 'would', 'desc': 'would' }, { 'text': 'play', 'desc': 'play' },\r\n    { 'text': 'for', 'desc': 'for' }, { 'text': 'the', 'desc': 'the' }, { 'text': 'local', 'desc': 'local' },\r\n    { 'text': 'radio', 'desc': 'radio' }, { 'text': 'station.', 'desc': 'station.' }, { 'text': 'He', 'desc': 'He' },\r\n    { 'text': 'often', 'desc': 'often' }, { 'text': 'told', 'desc': 'told' }, { 'text': 'us', 'desc': 'us' }, { 'text': 'how', 'desc': 'how' },\r\n    { 'text': 'he', 'desc': 'he' }, { 'text': 'had', 'desc': 'had' }, { 'text': 'auditioned', 'desc': 'auditioned' }, { 'text': 'and', 'desc': 'and' },\r\n    { 'text': 'earned', 'desc': 'earned' }, { 'text': 'a', 'desc': 'a' }, { 'text': 'position', 'desc': 'position' }, { 'text': 'in', 'desc': 'in' },\r\n    { 'text': 'a', 'desc': 'a' }, { 'text': 'band', 'desc': 'band' }, { 'text': 'that', 'desc': 'that' }, { 'text': 'featured', 'desc': 'featured' },\r\n    { 'text': 'Patsy', 'desc': 'Patsy' }, { 'text': 'Cline', 'desc': 'Cline' }, { 'text': 'as', 'desc': 'as' }, { 'text': 'their', 'desc': 'their' },\r\n    { 'text': 'lead', 'desc': 'lead' }, { 'text': 'singer.', 'desc': 'singer.' }, { 'text': 'He', 'desc': 'He' }, { 'text': 'told', 'desc': 'told' },\r\n    { 'text': 'the', 'desc': 'the' }, { 'text': 'family', 'desc': 'family' }, { 'text': 'that', 'desc': 'that' }, { 'text': 'after', 'desc': 'after' },\r\n    { 'text': 'he', 'desc': 'he' }, { 'text': 'was', 'desc': 'was' }, { 'text': 'hired', 'desc': 'hired' }, { 'text': 'he', 'desc': 'he' },\r\n    { 'text': 'never', 'desc': 'never' }, { 'text': 'went', 'desc': 'went' }, { 'text': 'back.', 'desc': 'back.' }, { 'text': 'Dad', 'desc': 'Dad' },\r\n    { 'text': 'was', 'desc': 'was' }, { 'text': 'a', 'desc': 'a' }, { 'text': 'very', 'desc': 'very' }, { 'text': 'religious', 'desc': 'religious' },\r\n    { 'text': 'man.', 'desc': 'man.' }, { 'text': 'He', 'desc': 'He' }, { 'text': 'stated', 'desc': 'stated' }, { 'text': 'that', 'desc': 'that' },\r\n    { 'text': 'there', 'desc': 'there' }, { 'text': 'was', 'desc': 'was' }, { 'text': 'a', 'desc': 'a' }, { 'text': 'lot', 'desc': 'lot' },\r\n    { 'text': 'of', 'desc': 'of' }, { 'text': 'drinking', 'desc': 'drinking' }, { 'text': 'and', 'desc': 'and' },\r\n    { 'text': 'cursing', 'desc': 'cursing' }, { 'text': 'the', 'desc': 'the' }, { 'text': 'day', 'desc': 'day' },\r\n    { 'text': 'of', 'desc': 'of' }, { 'text': 'his', 'desc': 'his' }, { 'text': 'audition', 'desc': 'audition' },\r\n    { 'text': 'and', 'desc': 'and' }, { 'text': 'he', 'desc': 'he' }, { 'text': 'did', 'desc': 'did' }, { 'text': 'not', 'desc': 'not' },\r\n    { 'text': 'want', 'desc': 'want' }, { 'text': 'to', 'desc': 'to' }, { 'text': 'be', 'desc': 'be' }, { 'text': 'around', 'desc': 'around' },\r\n    { 'text': 'that', 'desc': 'that' }, { 'text': 'type', 'desc': 'type' }, { 'text': 'of', 'desc': 'of' },\r\n    { 'text': 'environment.', 'desc': 'environment.' }\r\n]\r\n\r\nexport default test;    ","import React, { useState, useRef, useEffect } from 'react';\r\nimport Coder, { CoderMethots } from '../Components/Coder';\r\n// import produce from 'immer'\r\nimport { \r\n    jsAllData,\r\n    jsStringData, \r\n    jsArrayData, \r\n    jsDateData, \r\n    jsMathData, \r\n    jsNumberData, \r\n    jsObjectData, \r\n    jsMapSetData,\r\n    jsPromiseData,\r\n    jsGlobalData\r\n} from '../data'\r\nimport styles from './index.less'\r\n\r\nexport default function Index() {\r\n    \r\n    const [select, setSelect] = useState('1')\r\n    const [speed, setSpeed] = useState('') \r\n    const [correct, setCorrect] = useState('')\r\n    const [codeData, setCodeData] = useState(jsArrayData)\r\n    const [coderKey, updateCoderKey] = useState('')\r\n    const [isStart, setIsStart] = useState(false)\r\n    const codeRef = useRef<CoderMethots>(null)\r\n\r\n\r\n    useEffect(() => {\r\n        if(coderKey && isStart) {\r\n            const coder = codeRef.current\r\n            if(coder) {\r\n                coder.start()\r\n            }\r\n        }\r\n    }, [coderKey, isStart])\r\n\r\n    function changeSelect(e: React.ChangeEvent<HTMLSelectElement>) {\r\n        const value = e.target.value\r\n        updateCoderKey(Math.random() + '' + new Date().getTime())\r\n        setIsStart(false)\r\n        setSelect(value)\r\n        switch (value) {\r\n        case '0':\r\n            setCodeData(jsAllData)\r\n            break;\r\n        case '1':\r\n            setCodeData(jsArrayData)\r\n            break;\r\n        case '2':\r\n            setCodeData(jsDateData)\r\n            break;\r\n        case '3':\r\n            setCodeData(jsMathData)\r\n            break;\r\n        case '4':\r\n            setCodeData(jsNumberData)\r\n            break;\r\n        case '5':\r\n            setCodeData(jsObjectData)\r\n            break;\r\n        case '6':\r\n            setCodeData(jsStringData)\r\n            break;\r\n        case '7':\r\n            setCodeData(jsMapSetData)\r\n            break;\r\n        case '8':\r\n            setCodeData(jsPromiseData)\r\n            break;\r\n        case '9':\r\n            setCodeData(jsGlobalData)\r\n            break;\r\n        default :\r\n            setCodeData(jsArrayData)\r\n        }\r\n    }\r\n\r\n    function start() {\r\n        updateCoderKey(Math.random() + '' + new Date().getTime())\r\n        setIsStart(true)\r\n    }\r\n    function restart() {\r\n        updateCoderKey(Math.random() + '' + new Date().getTime())\r\n        setIsStart(true)\r\n    }\r\n\r\n    function end(speed: string, correct: string) {\r\n        setSpeed(speed)\r\n        setCorrect(correct)\r\n    }\r\n    return (<>\r\n        <div>\r\n            <select className=\"select\" value={select} onChange={changeSelect}>\r\n                \r\n                <option value=\"1\">js Array</option>\r\n                <option value=\"2\">js Date</option>\r\n                <option value=\"3\">js Math</option>\r\n                <option value=\"4\">js Number</option>\r\n                <option value=\"5\">js Object</option>\r\n                <option value=\"6\">js String</option>\r\n                <option value=\"7\">js Map Set</option>\r\n                <option value=\"8\">js Promise</option>\r\n                <option value=\"9\">js 全局函数</option>\r\n                <option value=\"0\">js all</option>\r\n            </select>\r\n\r\n            <button className=\"button ml-sm\" onClick={start}>开始</button>\r\n\r\n            <button className=\"button ml-sm\" onClick={restart}>重新开始</button>\r\n        </div>\r\n\r\n        <div className={styles.result}>\r\n            {speed && correct && <p><span>速度：{speed}</span> &nbsp; &nbsp;<span>正确率：{correct}</span></p>}\r\n        </div>\r\n\r\n        <Coder key={coderKey} ref={codeRef} code={codeData} end={end}/>\r\n    </>)\r\n}","/* eslint-disable */\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n  // [::1] is the IPv6 localhost address.\r\n  window.location.hostname === '[::1]' ||\r\n  // 127.0.0.0/8 are considered localhost for IPv4.\r\n  window.location.hostname.match(\r\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n  )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n/* eslint-disable */","import * as ReactDOM from 'react-dom';\r\nimport * as React from 'react';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nconsole.log(WEB_ENV);\r\n\r\nReactDOM.render(<App/>, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n\r\nif (module.hot) {\r\n    module.hot.accept();\r\n}\r\n","import * as React from 'react';\r\nimport './commont.css';\r\nimport Index from './Page'\r\n\r\nexport default function App() {\r\n    return (\r\n        <div className=\"container\">\r\n            <Index />\r\n        </div>\r\n    );\r\n    \r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"result\":\"index_result__2T8NB\"};"],"sourceRoot":""}